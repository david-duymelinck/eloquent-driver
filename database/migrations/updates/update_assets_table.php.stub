<?php

use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Str;
use Statamic\Eloquent\Assets\AssetModel;
use Statamic\Eloquent\Database\BaseMigration as Migration;

return new class extends Migration {
    public function up()
    {
        $hasColumns = [
            'container' => Schema::hasColumn('assets_meta', 'container'),
            'folder' => Schema::hasColumn('assets_meta', 'folder'),
            'basename' => Schema::hasColumn('assets_meta', 'basename'),
            'filename' => Schema::hasColumn('assets_meta', 'filename'),
            'extension' => Schema::hasColumn('assets_meta', 'extension'),
            'path' => Schema::hasColumn('assets_meta', 'path'),
            'meta' => Schema::hasColumn('assets_meta', 'meta'),
        ];

        Schema::table($this->prefix('assets_meta'), function (Blueprint $table) use ($hasColumns) {
            $index = [];

            if(!$hasColumns['container']) {
                $index[] = 'container';
                $table->string('container')->after('handle')->index();
            }

            if(!$hasColumns['folder']) {
                $index[] = 'folder';
                $table->string('folder')->after('container')->index();
            }

            if(!$hasColumns['basename']) {
                $index[] = 'basename';
                $table->string('basename')->after('folder')->index();
            }

            if(!$hasColumns['filename']) {
                $table->string('filename')->after('basename')->index();
            }

            if(!$hasColumns['extension']) {
                $table->char('extension', 10)->after('filename')->index();
            }

            if(!$hasColumns['path']) {
                $table->string('path')->after('extension')->index();
            }

            if(!$hasColumns['meta']) {
                $table->jsonb('meta')->after('path')->nullable();
            }

            if(count($index) > 0) {
                $table->index($index);
            }
        });

        AssetModel::all()
            ->each(function ($model)  {
                $path = Str::of($model->handle)->after('::')->replace('.meta/', '')->beforeLast('.yaml');

                if ($path->startsWith('./')) {
                    $path = $path->replaceFirst('./', '');
                }

                $model->container = Str::before($model->handle, '::');
                $model->path = $path;
                $model->folder = $path->contains('/') ? $path->beforeLast('/') : '/';
                $model->basename = $path->afterLast('/');
                $model->extension = Str::of($model->basename)->afterLast('.');
                $model->filename = Str::of($model->basename)->beforeLast('.');
                $model->meta = $model->data;
                $model->save();
            });

        Schema::table($this->prefix('assets_meta'), function (Blueprint $table) {
            if(Schema::hasColumn('assets_meta', 'handle')) {
                $table->dropColumn('handle');
            }
        });
    }

    public function down()
    {
        Schema::table($this->prefix('assets_meta'), function (Blueprint $table) {
            $table->string('handle')->index();
        });

        AssetModel::all()
            ->each(function ($model) {
                $model->handle = $model->container.'::'.$model->folder.'/.meta/'.$model->basename.'.yaml';
                $model->data = $model->meta;
                $model->saveQuietly();
            });

        Schema::table($this->prefix('assets_meta'), function (Blueprint $table) {
            $table->dropIndex(['container', 'folder', 'basename']);

            $table->dropColumn('meta');
            $table->dropColumn('path');
            $table->dropColumn('basename');
            $table->dropColumn('filename');
            $table->dropColumn('extension');
            $table->dropColumn('folder');
            $table->dropColumn('container');
        });
    }
};
